on: [push, pull_request]

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: s390x
            distro: ubuntu20.04
            buildtype: release

    steps:
      - uses: actions/checkout@v2.1.0
        with:
          repository: hse-project/hse
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"
          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts" 
            --volume "${{github.workspace}}:/workspace" 
          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}
          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -qq -y
                apt-get install -qq -y git curl libxslt1-dev libxml2-dev python3-lxml cmake cython3 python3-pytest-cython python3-toml python3-cryptography build-essential libbsd-dev pkg-config openjdk-8-jdk libmicrohttpd-dev liburcu-dev libyaml-dev liblz4-dev libcurl4-openssl-dev python3-setuptools libmongoc-1.0-0 libbson-1.0-0 libssl-dev libsasl2-dev python3-pip libffi-dev python3-dev cargo
                python3 -m pip install --user setuptools_rust
                python3 -m pip install --user poetry
                export PATH="$HOME/.local/bin:$HOME/.poetry/bin:$PATH"
                git clone https://github.com/hse-project/hse.git
                cd hse
                poetry install                
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac
          # Produce a binary artifact and place it in the mounted volume
          run: |
            set -x
            set +eu
            cd /workspace
            echo $PATH
            export PATH="$HOME/.local/bin:$HOME/.poetry/bin:$PATH"
            python3 -m pip install -U meson
            python3 -m pip install -U ninja
            ls -la /root/.local/bin
            apt-get update >/dev/null && apt-get install time cmake gawk cython python3-toml python3-pytoml -y 
            time poetry run meson builddir -Dbuildtype=${{ matrix.buildtype }}  -Dycsb=true
            python3 -m pip install -U toml
            export PYTHONPATH=/usr/lib/python3/dist-packages/pip:/root/.local/lib/python3.8/site-packages/pip:$PYTHONPATH
            time poetry run meson builddir -Dbuildtype=${{ matrix.buildtype }}  -Dycsb=true

            time poetry run ninja -C builddir
            time poetry run meson test -C /workspace/builddir --setup=ci --print-errorlogs --no-stdsplit

      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"
